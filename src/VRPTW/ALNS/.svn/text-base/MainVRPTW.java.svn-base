package bpc.Heuristics.VRPTW.ALNS;

import java.io.IOException;
import java.io.PrintWriter;

public class MainVRPTW {
	
	static String MEGASTRING = "";
	public static void main(String[] args) {
//
		String ini = null;
		String file = "data/";
		String name = "rc";
		String pre = ".txt";
		int instance = 204;
		int corridas = 5;
		double[] resultados = new double[corridas];
		double rAverage = 0;
		double tAverage = 0;
		double min = 999999;
		for (int t = 0; t < corridas; t++) {

			try {
				
				ini = file + name+instance + pre;
				System.out.print("Run " +( t+1));
				long seed = (long)Math.exp(t+1);
				System.out.println("   ALNS Heuristic: " + ini  );
				System.out.println("Seed: " + seed);
				
				DataHandler.r.setSeed(seed);// Cambiar con el for...
				DataHandler data = new DataHandler(ini, name, instance);
				data.ReadC();
				double cputime = System.currentTimeMillis();
				//DataHandler.k = 4;
				ClustersManager c = new ClustersManager();
				DataHandler.k = 10;
				
				InitialInsertionHeuristic ii = new InitialInsertionHeuristic();
				ii.getInitialSol2(VRPTW_Manager.routes,VRPTW_Manager.routesLoad, VRPTW_Manager.customers,VRPTW_Manager.requestBank);
				VRPTW_Manager.calculateFO();

				LNS generalHeuristic = new LNS();
				generalHeuristic.heuristic();
				cputime =(System.currentTimeMillis()-cputime)/1000.0;
				if (t>0) {
					if (generalHeuristic.getBestFO()<min) {
						min = generalHeuristic.getBestFO();
					}
					resultados[t] = generalHeuristic.getBestFO();
					rAverage+=generalHeuristic.getBestFO();
					tAverage += cputime;
				}
				
				System.out.println("CPU time:" + cputime);
				System.out.println("----------------------------------------------------------------------------------------------");
				
			
			} catch (NumberFormatException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		corridas--;
		tAverage = tAverage/corridas;
		rAverage =rAverage/corridas;
		double desvest = 0;
		for (int i = 1; i < corridas; i++) {
			desvest += (resultados[i]-rAverage);
		}
		desvest = desvest/(corridas-1);
		corridas = corridas/5;
		System.out.println("Average "+ rAverage + " Desvest: " + desvest);
		System.out.println("BestSol " + min);
		System.out.println(tAverage);
		PrintWriter pw;
		/*try {
			//pw = new PrintWriter("cols " +  instance + ".txt");
			//pw.write(MEGASTRING);
			//pw.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
	}
}
